import React, { useMemo } from 'react'
import styles from './styles.module.scss'
import { GetStaticProps } from 'next'
import { getLatestPosts } from '@/utils/post'
import Link from 'next/link'
import { animated, useTransition } from '@react-spring/web'
import clsx from 'clsx'
import useTranslation from '@/hooks/useTranslation'

const FONT_MIN = 12
const FONT_MAX = 48
const OPACITY_MIN = 0
const OPACITY_MAX = 1

interface TagsInfo {
  tagName: string
  postsNum: number
}

export interface TagsProps {
  tags: TagsInfo[]
}

const Tags: NextPageWithCustomProps<TagsProps> = props => {
  const { tags } = props
  const { t } = useTranslation()
  const transitions = useTransition(tags, {
    from: { scale: 0.5, opacity: 0 },
    enter: { scale: 1, opacity: 1 },
    leave: { scale: 0.5, opacity: 0 },
    trail: 400 / tags.length,
    reset: true,
  })

  const totalNum = useMemo(() => tags.reduce((acc, cur) => acc + cur.postsNum, 0), [tags])

  return (
    <div className={clsx(styles.tags, 'prose-container flex flex-col items-center justify-center')}>
      <h2
        className={clsx(
          styles.title,
          'relative font-medium text-5xl mt-20 sm:mt-40',
        )}
      >
        <svg width="91" height="63" viewBox="0 0 91 63" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M39.368 1.16C40.36 1.352 41.096 1.688 41.576 2.168C42.088 2.648 42.344 3.208 42.344 3.848C42.344 4.904 42.04 5.672 41.432 6.152C40.856 6.632 39.928 6.824 38.648 6.728C35.768 6.504 33.512 6.36 31.88 6.296C30.28 6.2 28.168 6.136 25.544 6.104C24.36 11.992 23.272 17.912 22.28 23.864C21.928 26.04 21.56 28.568 21.176 31.448C20.792 34.296 20.536 36.6 20.408 38.36C20.344 39.288 19.96 40.008 19.256 40.52C18.552 41 17.704 41.24 16.712 41.24C15.656 41.24 14.84 40.984 14.264 40.472C13.688 39.96 13.4 39.288 13.4 38.456C13.4 37.688 13.512 36.424 13.736 34.664C13.992 32.872 14.28 31 14.6 29.048C14.952 27.096 15.224 25.4 15.416 23.96C15.768 21.528 16.168 19.112 16.616 16.712C17.064 14.312 17.512 12.04 17.96 9.896C18.056 9.416 18.168 8.872 18.296 8.264C18.424 7.624 18.568 6.92 18.728 6.152C15.592 6.248 13.128 6.504 11.336 6.92C9.544 7.336 8.264 7.928 7.496 8.696C6.76 9.432 6.392 10.392 6.392 11.576C6.392 12.664 6.712 13.704 7.352 14.696C7.48 14.92 7.544 15.16 7.544 15.416C7.544 16.024 7.176 16.6 6.44 17.144C5.736 17.656 5 17.912 4.232 17.912C3.688 17.912 3.24 17.752 2.888 17.432C2.248 16.888 1.72 16.12 1.304 15.128C0.888 14.104 0.68 12.952 0.68 11.672C0.68 8.952 1.56 6.776 3.32 5.144C5.112 3.48 7.816 2.264 11.432 1.496C15.08 0.727998 19.752 0.343997 25.448 0.343997C28.968 0.343997 31.768 0.407997 33.848 0.535997C35.96 0.663998 37.8 0.871998 39.368 1.16ZM36.1299 41.24C34.1459 41.24 32.5619 40.52 31.3779 39.08C30.1939 37.64 29.6019 35.752 29.6019 33.416C29.6019 30.856 30.1939 28.44 31.3779 26.168C32.5619 23.864 34.1299 22.024 36.0819 20.648C38.0659 19.24 40.1619 18.536 42.3699 18.536C43.0739 18.536 43.5379 18.68 43.7619 18.968C44.0179 19.224 44.2259 19.704 44.3859 20.408C45.0579 20.28 45.7619 20.216 46.4979 20.216C48.0659 20.216 48.8499 20.776 48.8499 21.896C48.8499 22.568 48.6099 24.168 48.1299 26.696C47.3939 30.376 47.0259 32.936 47.0259 34.376C47.0259 34.856 47.1379 35.24 47.3619 35.528C47.6179 35.816 47.9379 35.96 48.3219 35.96C48.9299 35.96 49.6659 35.576 50.5299 34.808C51.3939 34.008 52.5619 32.728 54.0339 30.968C54.4179 30.52 54.8499 30.296 55.3299 30.296C55.7459 30.296 56.0659 30.488 56.2899 30.872C56.5459 31.256 56.6739 31.784 56.6739 32.456C56.6739 33.736 56.3699 34.728 55.7619 35.432C54.4499 37.064 53.0579 38.44 51.5859 39.56C50.1139 40.68 48.6899 41.24 47.3139 41.24C46.2579 41.24 45.2819 40.888 44.3859 40.184C43.5219 39.448 42.8659 38.456 42.4179 37.208C40.7539 39.896 38.6579 41.24 36.1299 41.24ZM37.8579 36.392C38.5619 36.392 39.2339 35.976 39.8739 35.144C40.5139 34.312 40.9779 33.208 41.2659 31.832L43.0419 23C41.6979 23.032 40.4499 23.544 39.2979 24.536C38.1779 25.496 37.2819 26.776 36.6099 28.376C35.9379 29.976 35.6019 31.672 35.6019 33.464C35.6019 34.456 35.7939 35.192 36.1779 35.672C36.5939 36.152 37.1539 36.392 37.8579 36.392ZM69.0448 20.216C69.8448 20.216 70.4048 20.344 70.7248 20.6C71.0768 20.824 71.2528 21.288 71.2528 21.992C71.2528 22.376 71.2368 22.68 71.2048 22.904C71.0768 23.896 70.6768 26.456 70.0048 30.584C69.5248 33.368 69.2208 35.208 69.0928 36.104C67.8768 44.36 66.2288 50.872 64.1488 55.64C62.1008 60.44 59.3488 62.84 55.8928 62.84C54.2608 62.84 52.9328 62.328 51.9088 61.304C50.8848 60.312 50.3727 59 50.3727 57.368C50.3727 55.096 51.2688 52.648 53.0608 50.024C54.8528 47.432 58.2128 44.232 63.1407 40.424L63.4288 38.552C62.8848 39.416 62.1648 40.088 61.2688 40.568C60.4048 41.016 59.5408 41.24 58.6768 41.24C56.6928 41.24 55.1088 40.52 53.9248 39.08C52.7408 37.64 52.1488 35.752 52.1488 33.416C52.1488 30.856 52.7408 28.44 53.9248 26.168C55.1088 23.864 56.6768 22.024 58.6288 20.648C60.6128 19.24 62.7088 18.536 64.9168 18.536C65.6208 18.536 66.0848 18.68 66.3088 18.968C66.5648 19.224 66.7728 19.704 66.9328 20.408C67.5408 20.28 68.2448 20.216 69.0448 20.216ZM60.4048 36.392C61.1408 36.392 61.8448 35.944 62.5168 35.048C63.1888 34.152 63.6688 32.872 63.9568 31.208L65.4928 23C64.1808 23.032 62.9648 23.544 61.8448 24.536C60.7248 25.496 59.8288 26.776 59.1568 28.376C58.4848 29.976 58.1488 31.672 58.1488 33.464C58.1488 34.456 58.3408 35.192 58.7248 35.672C59.1408 36.152 59.7008 36.392 60.4048 36.392ZM56.4208 58.184C57.2208 58.184 58.1168 57.224 59.1088 55.304C60.1328 53.384 61.1088 50.328 62.0368 46.136C59.5728 48.248 57.7968 50.152 56.7088 51.848C55.6208 53.544 55.0768 55.032 55.0768 56.312C55.0768 56.856 55.1728 57.304 55.3648 57.656C55.5888 58.008 55.9408 58.184 56.4208 58.184ZM83.0289 42.296C81.3649 42.296 80.0849 41.912 79.1889 41.144C78.3249 40.376 77.8929 39.512 77.8929 38.552C77.8929 37.72 78.1969 37 78.8049 36.392C79.4129 35.784 80.3089 35.48 81.4929 35.48C81.9089 35.48 82.3889 35.528 82.9329 35.624C83.5089 35.688 83.9409 35.736 84.2289 35.768C84.1969 34.936 84.0049 34.152 83.6529 33.416C83.3329 32.68 82.9169 31.976 82.4049 31.304C81.8929 30.6 81.4129 29.992 80.9649 29.48C79.9729 31.368 78.9809 32.936 77.9889 34.184C77.0289 35.432 75.9729 36.616 74.8209 37.736C74.2449 38.312 73.6369 38.6 72.9969 38.6C72.4849 38.6 72.0689 38.424 71.7489 38.072C71.4289 37.688 71.2689 37.224 71.2689 36.68C71.2689 36.04 71.4929 35.448 71.9409 34.904L72.5649 34.136C74.3249 31.96 75.6529 30.168 76.5489 28.76C77.1249 27.832 77.7009 26.728 78.2769 25.448C78.8849 24.168 79.6689 22.424 80.6289 20.216C81.2369 18.808 82.5009 18.104 84.4209 18.104C85.3169 18.104 85.9409 18.184 86.2929 18.344C86.6449 18.504 86.8209 18.76 86.8209 19.112C86.8209 19.304 86.7569 19.608 86.6289 20.024C86.5009 20.44 86.3249 20.856 86.1009 21.272C85.5249 22.424 85.2369 23.4 85.2369 24.2C85.2369 24.68 85.3969 25.208 85.7169 25.784C86.0689 26.36 86.5969 27.08 87.3009 27.944C88.3249 29.288 89.0929 30.44 89.6049 31.4C90.1489 32.328 90.4209 33.352 90.4209 34.472C90.4209 35.816 90.1009 37.096 89.4609 38.312C88.8529 39.496 87.9889 40.456 86.8689 41.192C85.7489 41.928 84.4689 42.296 83.0289 42.296Z" fill="currentColor"/>
        </svg>
      </h2>
      <p className="font-medium text-sm m-10 sm:m-14">
        {t('tags-page.desc', { count: tags.length })}
      </p>
      <div className="flex items-center justify-center flex-wrap gap-7">
        {transitions((tagStyles, { tagName, postsNum }) => (
          <animated.div key={tagName} style={tagStyles}>
            <Link href={`/tags/${tagName}`}>
              <a
                className="border-b border-current transition hover:!opacity-100 hover:text-[#ff7464]"
                style={{
                  // 该 tag 文章数占总数 20% 时字体达到最大
                  fontSize: Math.min(
                    FONT_MIN + ((postsNum / totalNum) * (FONT_MAX - FONT_MIN)) / 0.2,
                    FONT_MAX,
                  ),
                  // 该 tag 文章数占总数 10% 时字体颜色达到最深
                  opacity: Math.min(
                    OPACITY_MIN + ((postsNum / totalNum) * (OPACITY_MAX - OPACITY_MIN)) / 0.1,
                    OPACITY_MAX,
                  ),
                }}
              >
                {tagName}
              </a>
            </Link>
          </animated.div>
        ))}
      </div>
    </div>
  )
}

export const getStaticProps: GetStaticProps<any, { slug: string }> = async () => {
  const posts = await getLatestPosts({ orderBy: 'asc' })
  const tags: Record<string, TagsInfo> = {}

  for (const post of posts) {
    for (const tag of post.frontmatter.tags || []) {
      if (!tags[tag]) tags[tag] = { tagName: tag, postsNum: 0 }
      tags[tag].postsNum++
    }
  }

  return {
    props: { tags: Object.values(tags) },
  }
}

export default Tags
